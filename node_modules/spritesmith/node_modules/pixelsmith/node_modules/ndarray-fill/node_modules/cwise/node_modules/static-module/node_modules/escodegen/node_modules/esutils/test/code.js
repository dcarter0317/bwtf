(function() {
  'use strict';
  var esutils, expect;

  expect = require('chai').expect;

  esutils = require('../');

  describe('code', function() {
    describe('isDecimalDigit', function() {
      it('returns true if provided code is decimal digit', function() {
        var ch, i, results;
        results = [];
        for (ch = i = 0; i <= 9; ch = ++i) {
          results.push(expect(esutils.code.isDecimalDigit((ch + '').charCodeAt(0))).to.be["true"]);
        }
        return results;
      });
      return it('returns false if provided code is not decimal digit', function() {
        var code, i, j, ref, ref1, ref2, ref3, results;
        for (code = i = ref = 'a'.charCodeAt(0), ref1 = 'z'.charCodeAt(0); ref <= ref1 ? i <= ref1 : i >= ref1; code = ref <= ref1 ? ++i : --i) {
          expect(esutils.code.isDecimalDigit(code)).to.be["false"];
        }
        results = [];
        for (code = j = ref2 = 'A'.charCodeAt(0), ref3 = 'Z'.charCodeAt(0); ref2 <= ref3 ? j <= ref3 : j >= ref3; code = ref2 <= ref3 ? ++j : --j) {
          results.push(expect(esutils.code.isDecimalDigit(code)).to.be["false"]);
        }
        return results;
      });
    });
    describe('isHexDigit', function() {
      it('returns true if provided code is hexadecimal digit', function() {
        var ch, code, i, j, k, ref, ref1, ref2, ref3, results;
        for (ch = i = 0; i <= 9; ch = ++i) {
          expect(esutils.code.isHexDigit((ch + '').charCodeAt(0))).to.be["true"];
        }
        for (code = j = ref = 'a'.charCodeAt(0), ref1 = 'f'.charCodeAt(0); ref <= ref1 ? j <= ref1 : j >= ref1; code = ref <= ref1 ? ++j : --j) {
          expect(esutils.code.isHexDigit(code)).to.be["true"];
        }
        results = [];
        for (code = k = ref2 = 'A'.charCodeAt(0), ref3 = 'F'.charCodeAt(0); ref2 <= ref3 ? k <= ref3 : k >= ref3; code = ref2 <= ref3 ? ++k : --k) {
          results.push(expect(esutils.code.isHexDigit(code)).to.be["true"]);
        }
        return results;
      });
      return it('returns false if provided code is not hexadecimal digit', function() {
        var code, i, j, ref, ref1, ref2, ref3, results;
        for (code = i = ref = 'g'.charCodeAt(0), ref1 = 'z'.charCodeAt(0); ref <= ref1 ? i <= ref1 : i >= ref1; code = ref <= ref1 ? ++i : --i) {
          expect(esutils.code.isHexDigit(code)).to.be["false"];
        }
        results = [];
        for (code = j = ref2 = 'G'.charCodeAt(0), ref3 = 'Z'.charCodeAt(0); ref2 <= ref3 ? j <= ref3 : j >= ref3; code = ref2 <= ref3 ? ++j : --j) {
          results.push(expect(esutils.code.isHexDigit(code)).to.be["false"]);
        }
        return results;
      });
    });
    describe('isOctalDigit', function() {
      it('returns true if provided code is octal digit', function() {
        var ch, i, results;
        results = [];
        for (ch = i = 0; i <= 7; ch = ++i) {
          results.push(expect(esutils.code.isOctalDigit((ch + '').charCodeAt(0))).to.be["true"]);
        }
        return results;
      });
      return it('returns false if provided code is not octal digit', function() {
        var ch, code, i, j, k, ref, ref1, ref2, ref3, results;
        for (ch = i = 8; i <= 9; ch = ++i) {
          expect(esutils.code.isOctalDigit((ch + '').charCodeAt(0))).to.be["false"];
        }
        for (code = j = ref = 'a'.charCodeAt(0), ref1 = 'z'.charCodeAt(0); ref <= ref1 ? j <= ref1 : j >= ref1; code = ref <= ref1 ? ++j : --j) {
          expect(esutils.code.isOctalDigit(code)).to.be["false"];
        }
        results = [];
        for (code = k = ref2 = 'A'.charCodeAt(0), ref3 = 'Z'.charCodeAt(0); ref2 <= ref3 ? k <= ref3 : k >= ref3; code = ref2 <= ref3 ? ++k : --k) {
          results.push(expect(esutils.code.isOctalDigit(code)).to.be["false"]);
        }
        return results;
      });
    });
    describe('isWhiteSpace', function() {
      it('returns true if provided code is white space', function() {
        var code, codes, i, len, results;
        codes = [0x0009, 0x000B, 0x000C, 0x0020, 0x00A0, 0xFEFF, 0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000];
        results = [];
        for (i = 0, len = codes.length; i < len; i++) {
          code = codes[i];
          results.push(expect(esutils.code.isWhiteSpace(code)).to.be["true"]);
        }
        return results;
      });
      return it('returns false if provided code is not white space', function() {
        var ch, code, i, j, k, ref, ref1, ref2, ref3, results;
        for (ch = i = 0; i <= 9; ch = ++i) {
          expect(esutils.code.isWhiteSpace((ch + '').charCodeAt(0))).to.be["false"];
        }
        for (code = j = ref = 'a'.charCodeAt(0), ref1 = 'z'.charCodeAt(0); ref <= ref1 ? j <= ref1 : j >= ref1; code = ref <= ref1 ? ++j : --j) {
          expect(esutils.code.isWhiteSpace(code)).to.be["false"];
        }
        results = [];
        for (code = k = ref2 = 'A'.charCodeAt(0), ref3 = 'Z'.charCodeAt(0); ref2 <= ref3 ? k <= ref3 : k >= ref3; code = ref2 <= ref3 ? ++k : --k) {
          results.push(expect(esutils.code.isWhiteSpace(code)).to.be["false"]);
        }
        return results;
      });
    });
    describe('isLineTerminator', function() {
      it('returns true if provided code is line terminator', function() {
        var code, codes, i, len, results;
        codes = [0x000A, 0x000D, 0x2028, 0x2029];
        results = [];
        for (i = 0, len = codes.length; i < len; i++) {
          code = codes[i];
          results.push(expect(esutils.code.isLineTerminator(code)).to.be["true"]);
        }
        return results;
      });
      return it('returns false if provided code is not line terminator', function() {
        var ch, code, i, j, k, ref, ref1, ref2, ref3, results;
        for (ch = i = 0; i <= 9; ch = ++i) {
          expect(esutils.code.isLineTerminator((ch + '').charCodeAt(0))).to.be["false"];
        }
        for (code = j = ref = 'a'.charCodeAt(0), ref1 = 'z'.charCodeAt(0); ref <= ref1 ? j <= ref1 : j >= ref1; code = ref <= ref1 ? ++j : --j) {
          expect(esutils.code.isLineTerminator(code)).to.be["false"];
        }
        results = [];
        for (code = k = ref2 = 'A'.charCodeAt(0), ref3 = 'Z'.charCodeAt(0); ref2 <= ref3 ? k <= ref3 : k >= ref3; code = ref2 <= ref3 ? ++k : --k) {
          results.push(expect(esutils.code.isLineTerminator(code)).to.be["false"]);
        }
        return results;
      });
    });
    describe('isIdentifierStart', function() {
      it('returns true if provided code can be a start of Identifier', function() {
        var characters, code, i, len, ref, results;
        characters = ['a', '$', '_', 'ゆ'];
        ref = characters.map(function(ch) {
          return ch.charCodeAt(0);
        });
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          code = ref[i];
          results.push(expect(esutils.code.isIdentifierStart(code)).to.be["true"]);
        }
        return results;
      });
      return it('returns false if provided code cannot be a start of Identifier', function() {
        var ch, i, results;
        results = [];
        for (ch = i = 0; i <= 9; ch = ++i) {
          results.push(expect(esutils.code.isIdentifierStart((ch + '').charCodeAt(0))).to.be["false"]);
        }
        return results;
      });
    });
    return describe('isIdentifierPart', function() {
      it('returns true if provided code can be a part of Identifier', function() {
        var ch, characters, code, i, j, len, ref, results;
        characters = ['a', '_', '$', 'ゆ'];
        ref = characters.map(function(ch) {
          return ch.charCodeAt(0);
        });
        for (i = 0, len = ref.length; i < len; i++) {
          code = ref[i];
          expect(esutils.code.isIdentifierPart(code)).to.be["true"];
        }
        results = [];
        for (ch = j = 0; j <= 9; ch = ++j) {
          results.push(expect(esutils.code.isIdentifierPart((ch + '').charCodeAt(0))).to.be["true"]);
        }
        return results;
      });
      return it('returns false if provided code cannot be a part of Identifier', function() {
        expect(esutils.code.isIdentifierPart('+'.charCodeAt(0))).to.be["false"];
        return expect(esutils.code.isIdentifierPart('-'.charCodeAt(0))).to.be["false"];
      });
    });
  });

}).call(this);
