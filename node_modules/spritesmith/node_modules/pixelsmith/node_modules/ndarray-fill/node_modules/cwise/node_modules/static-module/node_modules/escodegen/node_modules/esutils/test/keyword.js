(function() {
  'use strict';
  var KW, SRW, esutils, expect;

  expect = require('chai').expect;

  esutils = require('../');

  KW = ['if', 'in', 'do', 'var', 'for', 'new', 'try', 'this', 'else', 'case', 'void', 'with', 'enum', 'while', 'break', 'catch', 'throw', 'const', 'class', 'super', 'return', 'typeof', 'delete', 'switch', 'export', 'import', 'default', 'finally', 'extends', 'function', 'continue', 'debugger', 'instanceof'];

  SRW = ['implements', 'interface', 'package', 'private', 'protected', 'public', 'static', 'let'];

  describe('keyword', function() {
    describe('isKeywordES6', function() {
      it('returns true if provided string is keyword under non-strict mode', function() {
        var i, len, word;
        for (i = 0, len = KW.length; i < len; i++) {
          word = KW[i];
          expect(esutils.keyword.isKeywordES6(word, false)).to.be["true"];
        }
        return expect(esutils.keyword.isKeywordES6('yield', false)).to.be["true"];
      });
      it('returns false if provided string is not keyword under non-strict mode', function() {
        var i, j, len, len1, results, word, words;
        words = ['hello', '20', '$', 'ゆゆ式'];
        for (i = 0, len = words.length; i < len; i++) {
          word = words[i];
          expect(esutils.keyword.isKeywordES6(word, false)).to.be["false"];
        }
        results = [];
        for (j = 0, len1 = SRW.length; j < len1; j++) {
          word = SRW[j];
          results.push(expect(esutils.keyword.isKeywordES6(word, false)).to.be["false"]);
        }
        return results;
      });
      it('returns true if provided string is keyword under strict mode', function() {
        var i, j, len, len1, results, word;
        for (i = 0, len = KW.length; i < len; i++) {
          word = KW[i];
          expect(esutils.keyword.isKeywordES6(word, true)).to.be["true"];
        }
        expect(esutils.keyword.isKeywordES6('yield', true)).to.be["true"];
        results = [];
        for (j = 0, len1 = SRW.length; j < len1; j++) {
          word = SRW[j];
          results.push(expect(esutils.keyword.isKeywordES6(word, true)).to.be["true"]);
        }
        return results;
      });
      return it('returns false if provided string is not keyword under strict mode', function() {
        var i, len, results, word, words;
        words = ['hello', '20', '$', 'ゆゆ式'];
        results = [];
        for (i = 0, len = words.length; i < len; i++) {
          word = words[i];
          results.push(expect(esutils.keyword.isKeywordES6(word, true)).to.be["false"]);
        }
        return results;
      });
    });
    describe('isKeywordES5', function() {
      it('returns true if provided string is keyword under non-strict mode', function() {
        var i, len, results, word;
        results = [];
        for (i = 0, len = KW.length; i < len; i++) {
          word = KW[i];
          results.push(expect(esutils.keyword.isKeywordES5(word, false)).to.be["true"]);
        }
        return results;
      });
      it('returns false if provided string is not keyword under non-strict mode', function() {
        var i, j, len, len1, word, words;
        words = ['hello', '20', '$', 'ゆゆ式'];
        for (i = 0, len = words.length; i < len; i++) {
          word = words[i];
          expect(esutils.keyword.isKeywordES5(word, false)).to.be["false"];
        }
        for (j = 0, len1 = SRW.length; j < len1; j++) {
          word = SRW[j];
          expect(esutils.keyword.isKeywordES5(word, false)).to.be["false"];
        }
        return expect(esutils.keyword.isKeywordES5('yield', false)).to.be["false"];
      });
      it('returns true if provided string is keyword under strict mode', function() {
        var i, j, len, len1, results, word;
        for (i = 0, len = KW.length; i < len; i++) {
          word = KW[i];
          expect(esutils.keyword.isKeywordES5(word, true)).to.be["true"];
        }
        expect(esutils.keyword.isKeywordES5('yield', true)).to.be["true"];
        results = [];
        for (j = 0, len1 = SRW.length; j < len1; j++) {
          word = SRW[j];
          results.push(expect(esutils.keyword.isKeywordES5(word, true)).to.be["true"]);
        }
        return results;
      });
      return it('returns false if provided string is not keyword under strict mode', function() {
        var i, len, results, word, words;
        words = ['hello', '20', '$', 'ゆゆ式'];
        results = [];
        for (i = 0, len = words.length; i < len; i++) {
          word = words[i];
          results.push(expect(esutils.keyword.isKeywordES5(word, true)).to.be["false"]);
        }
        return results;
      });
    });
    describe('isRestrictedWord', function() {
      it('returns true if provided string is "eval" or "arguments"', function() {
        expect(esutils.keyword.isRestrictedWord('eval')).to.be["true"];
        return expect(esutils.keyword.isRestrictedWord('arguments')).to.be["true"];
      });
      return it('returns false if provided string is not "eval" or "arguments"', function() {
        var i, len, results, word, words;
        words = ['hello', '20', '$', 'ゆゆ式'];
        results = [];
        for (i = 0, len = words.length; i < len; i++) {
          word = words[i];
          results.push(expect(esutils.keyword.isRestrictedWord(word)).to.be["false"]);
        }
        return results;
      });
    });
    return describe('isIdentifierName', function() {
      it('returns false if provided string is empty', function() {
        return expect(esutils.keyword.isIdentifierName('')).to.be["false"];
      });
      it('returns true if provided string is IdentifierName', function() {
        var i, len, results, word, words;
        words = ['hello', '$', 'ゆゆ式', '$20', 'hello20', '_'];
        results = [];
        for (i = 0, len = words.length; i < len; i++) {
          word = words[i];
          results.push(expect(esutils.keyword.isIdentifierName(word)).to.be["true"]);
        }
        return results;
      });
      return it('returns false if provided string is not IdentifierName', function() {
        var i, len, results, word, words;
        words = ['+hello', '0$', '-ゆゆ式', '#_'];
        results = [];
        for (i = 0, len = words.length; i < len; i++) {
          word = words[i];
          results.push(expect(esutils.keyword.isIdentifierName(word)).to.be["false"]);
        }
        return results;
      });
    });
  });

}).call(this);
